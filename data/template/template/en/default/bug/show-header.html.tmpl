use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.26
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1483774492',
        'name' => 'bug/show-header.html.tmpl',
    },
    BLOCK => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
$output .=  "\n\n";
$output .=  "\n";
#line 16 "template/en/default/bug/show-header.html.tmpl"

# CAPTURE
$stash->set('filtered_alias', do {
    my $output = '';

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['bug', 0, 'alias', 0, 'join', [ ', ' ]]);
    
    &$_tt_filter($output);
};

    $output;
});

#line 17 "template/en/default/bug/show-header.html.tmpl"

# CAPTURE
$stash->set('filtered_desc', do {
    my $output = '';

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['bug', 0, 'short_desc', 0]);
    
    &$_tt_filter($output);
};

    $output;
});

#line 18 "template/en/default/bug/show-header.html.tmpl"

# CAPTURE
$stash->set('filtered_timestamp', do {
    my $output = '';

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('time')
              || $context->throw($context->error);

$output .=  $stash->get(['bug', 0, 'delta_ts', 0]);
    
    &$_tt_filter($output);
};

    $output;
});

$output .=  "\n";
#line 20 "template/en/default/bug/show-header.html.tmpl"
$stash->set('subheader', $stash->get('filtered_desc'));
#line 1 "template/en/default/bug/show-header.html.tmpl"
$stash->set('title', ($stash->get(['bug', 0, 'bug_id', 0]) . " &ndash; "));
#line 24 "template/en/default/bug/show-header.html.tmpl"
if ($stash->get(['bug', 0, 'alias', 0, 'size', 0])) {
#line 1 "template/en/default/bug/show-header.html.tmpl"
$stash->set('title', $stash->get('title')  . ("(" . $stash->get('filtered_alias') . ") "));
}

#line 25 "template/en/default/bug/show-header.html.tmpl"
$stash->set('title', $stash->get('title')  . $stash->get('filtered_desc'));
#line 26 "template/en/default/bug/show-header.html.tmpl"
$stash->set('generate_api_token', 1);
#line 27 "template/en/default/bug/show-header.html.tmpl"
$stash->set('yui', [ 'autocomplete', 'calendar' ]);
#line 28 "template/en/default/bug/show-header.html.tmpl"
if ($stash->get(['user', 0, 'can_tag_comments', 0])) {
$output .=  $stash->get(['yui', 0, 'push', [ 'container' ]]);
}

#line 29 "template/en/default/bug/show-header.html.tmpl"
$stash->set('javascript_urls', [ 'js/util.js', 'js/field.js' ]);
#line 30 "template/en/default/bug/show-header.html.tmpl"
if ($stash->get(['user', 0, 'id', 0])) {
$output .=  $stash->get(['javascript_urls', 0, 'push', [ 'js/bug.js' ]]);
}

#line 31 "template/en/default/bug/show-header.html.tmpl"
if ($stash->get(['user', 0, 'id', 0]) && $stash->get(['Param', [ 'comment_taggers_group' ]])) {
$output .=  $stash->get(['javascript_urls', 0, 'push', [ 'js/comment-tagging.js' ]]);
}

#line 64 "template/en/default/bug/show-header.html.tmpl"
if ($stash->get(['bug', 0, 'defined', 0])) {
#line 1 "template/en/default/bug/show-header.html.tmpl"
$stash->set('header', ($stash->get(['terms', 0, 'Bug', 0]) . "&nbsp;" . $stash->get(['bug', 0, 'bug_id', 0])));
#line 1 "template/en/default/bug/show-header.html.tmpl"
$stash->set('header_addl_info', ("Last modified: " . $stash->get('filtered_timestamp')));
#line 1 "template/en/default/bug/show-header.html.tmpl"
$stash->set('unfiltered_title', ($stash->get(['bug', 0, 'bug_id', 0]) . " â€“ "));
#line 39 "template/en/default/bug/show-header.html.tmpl"
if ($stash->get(['bug', 0, 'alias', 0, 'size', 0])) {
#line 38 "template/en/default/bug/show-header.html.tmpl"
$stash->set('unfiltered_title', $stash->get('unfiltered_title')  . '('  . $stash->get(['bug', 0, 'alias', 0, 'join', [ ', ' ]])  . ') ');
}

#line 40 "template/en/default/bug/show-header.html.tmpl"
$stash->set('unfiltered_title', $stash->get('unfiltered_title')  . $stash->get(['bug', 0, 'short_desc', 0]));
#line 63 "template/en/default/bug/show-header.html.tmpl"

# CAPTURE
$stash->set('javascript', do {
    my $output = '';
$output .=  "\n    if (history && history.replaceState) {\n      if(!document.location.href.match(/show_bug\\.cgi/)) {\n        history.replaceState( null,\n                             \"";
#line 45 "template/en/default/bug/show-header.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('js')
              || $context->throw($context->error);

$output .=  $stash->get('unfiltered_title');
    
    &$_tt_filter($output);
};

$output .=  "\",\n                             \"show_bug.cgi?id=";
#line 46 "template/en/default/bug/show-header.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('js')
              || $context->throw($context->error);

$output .=  $stash->get(['bug', 0, 'bug_id', 0]);
    
    &$_tt_filter($output);
};

$output .=  "\" );\n        document.title = \"";
#line 47 "template/en/default/bug/show-header.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('js')
              || $context->throw($context->error);

$output .=  $stash->get('unfiltered_title');
    
    &$_tt_filter($output);
};

$output .=  "\";\n      }\n      if (document.location.href.match(/show_bug\\.cgi\\?.*list_id=/)) {\n        var href = document.location.href;\n        href = href.replace(/[\\?&]+list_id=(\\d+|cookie)/, '');\n        history.replaceState(null, \"";
#line 52 "template/en/default/bug/show-header.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('js')
              || $context->throw($context->error);

$output .=  $stash->get('unfiltered_title');
    
    &$_tt_filter($output);
};

$output .=  "\", href);\n      }\n    }\n    YAHOO.util.Event.onDOMReady(function() {\n      initDirtyFieldTracking();\n";
#line 60 "template/en/default/bug/show-header.html.tmpl"
if ($stash->get(['user', 0, 'id', 0]) && $stash->get(['user', 0, 'is_involved_in_bug', [ $stash->get('bug') ]])) {
$output .=  "\n        YAHOO.bugzilla.bugUserLastVisit.update(";
#line 59 "template/en/default/bug/show-header.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('none')
              || $context->throw($context->error);

$output .=  $stash->get(['bug', 0, 'bug_id', 0]);
    
    &$_tt_filter($output);
};

$output .=  ");";
}

$output .=  "\n    });";
#line 62 "template/en/default/bug/show-header.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('none')
              || $context->throw($context->error);

$output .=  $stash->get('javascript');
    
    &$_tt_filter($output);
};

    $output;
});

}

#line 65 "template/en/default/bug/show-header.html.tmpl"
$stash->set('style_urls', [ 'skins/standard/bug.css' ]);
#line 66 "template/en/default/bug/show-header.html.tmpl"
$stash->set('doc_section', 'using/understanding.html');
#line 1 "template/en/default/bug/show-header.html.tmpl"
$stash->set('bodyclasses', [ 'bz_bug', ("bz_status_" . $stash->get(['bug', 0, 'bug_status', 0])), ("bz_product_" . $stash->get(['bug', 0, 'product', 0])), ("bz_component_" . $stash->get(['bug', 0, 'component', 0])), ("bz_bug_" . $stash->get(['bug', 0, 'bug_id', 0])) ]);
#line 75 "template/en/default/bug/show-header.html.tmpl"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get(['bug', 0, 'groups_in', 0]);
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR1:   while (! $_tt_error) {
            $stash->{'group'} = $_tt_value;
#line 1 "template/en/default/bug/show-header.html.tmpl"
$output .=  $stash->get(['bodyclasses', 0, 'push', [ ("bz_group_" . $stash->get(['group', 0, 'name', 0])) ]]);;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

$output .=  "\n";
#line 77 "template/en/default/bug/show-header.html.tmpl"
$output .=  $stash->get(['Hook', 0, 'process', [ 'end' ]]);
$output .=  "\n";
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
    DEFBLOCKS => {

    },
});
