.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DateTime::Locale::FromData 3pm"
.TH DateTime::Locale::FromData 3pm "2016-11-13" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DateTime::Locale::FromData \- Class for locale objects instantiated from pre\-defined data
.SH "VERSION"
.IX Header "VERSION"
version 1.11
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  my $locale = DateTime::Locale::FromData\->new(%lots_of_data)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is used to represent locales instantiated from the data in the
DateTime::Locale::Data module.
.SH "METHODS"
.IX Header "METHODS"
This class provides the following methods:
.IP "\(bu" 4
\&\f(CW$locale\fR\->code
.Sp
The complete locale id, something like \*(L"en-US\*(R".
.IP "\(bu" 4
\&\f(CW$locale\fR\->language_code
.Sp
The language portion of the code, like \*(L"en\*(R".
.IP "\(bu" 4
\&\f(CW$locale\fR\->script_code
.Sp
The script portion of the code, like \*(L"Hant\*(R".
.IP "\(bu" 4
\&\f(CW$locale\fR\->territory_code
.Sp
The territory portion of the code, like \*(L"\s-1US\*(R".\s0
.IP "\(bu" 4
\&\f(CW$locale\fR\->variant_code
.Sp
The variant portion of the code, like \*(L"\s-1POSIX\*(R".\s0
.IP "\(bu" 4
\&\f(CW$locale\fR\->name
.Sp
The locale's complete name, which always includes at least a language
component, plus optional territory and variant components. Something like
\&\*(L"English United States\*(R". The value returned will always be in English.
.IP "\(bu" 4
\&\f(CW$locale\fR\->language
.IP "\(bu" 4
\&\f(CW$locale\fR\->script
.IP "\(bu" 4
\&\f(CW$locale\fR\->territory
.IP "\(bu" 4
\&\f(CW$locale\fR\->variant
.Sp
The relevant component from the locale's complete name, like \*(L"English\*(R"
or \*(L"United States\*(R".
.IP "\(bu" 4
\&\f(CW$locale\fR\->native_name
.Sp
The locale's complete name in localized form as a \s-1UTF\-8\s0 string.
.IP "\(bu" 4
\&\f(CW$locale\fR\->native_language
.IP "\(bu" 4
\&\f(CW$locale\fR\->native_script
.IP "\(bu" 4
\&\f(CW$locale\fR\->native_territory
.IP "\(bu" 4
\&\f(CW$locale\fR\->native_variant
.Sp
The relevant component from the locale's complete native name as a \s-1UTF\-8\s0
string.
.PP
The following methods all return an array reference containing the specified
data.
.PP
The methods with \*(L"format\*(R" in the name should return strings that can be used a
part of a string, like \*(L"the month of July\*(R". The stand alone values are for use
in things like calendars as opposed to a sentence.
.PP
The narrow forms may not be unique (for example, in the day column heading for
a calendar it's okay to have \*(L"T\*(R" for both Tuesday and Thursday).
.PP
The wide name should always be the full name of thing in question. The narrow
name should be just one or two characters.
.IP "\(bu" 4
\&\f(CW$locale\fR\->month_format_wide
.IP "\(bu" 4
\&\f(CW$locale\fR\->month_format_abbreviated
.IP "\(bu" 4
\&\f(CW$locale\fR\->month_format_narrow
.IP "\(bu" 4
\&\f(CW$locale\fR\->month_stand_alone_wide
.IP "\(bu" 4
\&\f(CW$locale\fR\->month_stand_alone_abbreviated
.IP "\(bu" 4
\&\f(CW$locale\fR\->month_stand_alone_narrow
.IP "\(bu" 4
\&\f(CW$locale\fR\->day_format_wide
.IP "\(bu" 4
\&\f(CW$locale\fR\->day_format_abbreviated
.IP "\(bu" 4
\&\f(CW$locale\fR\->day_format_narrow
.IP "\(bu" 4
\&\f(CW$locale\fR\->day_stand_alone_wide
.IP "\(bu" 4
\&\f(CW$locale\fR\->day_stand_alone_abbreviated
.IP "\(bu" 4
\&\f(CW$locale\fR\->day_stand_alone_narrow
.IP "\(bu" 4
\&\f(CW$locale\fR\->quarter_format_wide
.IP "\(bu" 4
\&\f(CW$locale\fR\->quarter_format_abbreviated
.IP "\(bu" 4
\&\f(CW$locale\fR\->quarter_format_narrow
.IP "\(bu" 4
\&\f(CW$locale\fR\->quarter_stand_alone_wide
.IP "\(bu" 4
\&\f(CW$locale\fR\->quarter_stand_alone_abbreviated
.IP "\(bu" 4
\&\f(CW$locale\fR\->quarter_stand_alone_narrow
.IP "\(bu" 4
\&\f(CW$locale\fR\->am_pm_abbreviated
.IP "\(bu" 4
\&\f(CW$locale\fR\->era_wide
.IP "\(bu" 4
\&\f(CW$locale\fR\->era_abbreviated
.IP "\(bu" 4
\&\f(CW$locale\fR\->era_narrow
.PP
The following methods return strings appropriate for the
\&\f(CW\*(C`DateTime\->format_cldr\*(C'\fR method:
.IP "\(bu" 4
\&\f(CW$locale\fR\->date_format_full
.IP "\(bu" 4
\&\f(CW$locale\fR\->date_format_long
.IP "\(bu" 4
\&\f(CW$locale\fR\->date_format_medium
.IP "\(bu" 4
\&\f(CW$locale\fR\->date_format_short
.IP "\(bu" 4
\&\f(CW$locale\fR\->time_format_full
.IP "\(bu" 4
\&\f(CW$locale\fR\->time_format_long
.IP "\(bu" 4
\&\f(CW$locale\fR\->time_format_medium
.IP "\(bu" 4
\&\f(CW$locale\fR\->time_format_short
.IP "\(bu" 4
\&\f(CW$locale\fR\->datetime_format_full
.IP "\(bu" 4
\&\f(CW$locale\fR\->datetime_format_long
.IP "\(bu" 4
\&\f(CW$locale\fR\->datetime_format_medium
.IP "\(bu" 4
\&\f(CW$locale\fR\->datetime_format_short
.PP
A locale may also offer one or more formats for displaying part of a datetime,
such as the year and month, or hour and minute.
.IP "\(bu" 4
\&\f(CW$locale\fR\->format_for($name)
.Sp
These are accessed by passing a name to \f(CW\*(C`$locale\->format_for(...)\*(C'\fR,
where the name is a CLDR-style format specifier.
.Sp
The return value is a string suitable for passing to \f(CW\*(C`$dt\->format_cldr\*(C'\fR,
so you can do something like this:
.Sp
.Vb 1
\&  print $dt\->format_cldr( $dt\->locale\->format_for(\*(AqMMMdd\*(Aq) )
.Ve
.Sp
which for the \*(L"en\*(R" locale would print out something like \*(L"08 Jul\*(R".
.Sp
Note that the localization may also include additional text specific to the
locale. For example, the \*(L"MMMMd\*(R" format for the \*(L"zh\*(R" locale includes the
Chinese characters for \*(L"day\*(R" (X) and month (X), so you get something like
\&\*(L"8X23X\*(R".
.IP "\(bu" 4
\&\f(CW$locale\fR\->available_formats
.Sp
This should return a list of all the format names that could be passed
to \f(CW\*(C`$locale\->format_for\*(C'\fR.
.PP
There are also some miscellaneous methods:
.IP "\(bu" 4
\&\f(CW$locale\fR\->prefers_24_hour_time
.Sp
Returns a boolean indicating whether or not the locale prefers 24\-hour time.
.IP "\(bu" 4
\&\f(CW$locale\fR\->first_day_of_week
.Sp
Returns a number from 1 to 7 indicating the \fIlocal\fR first day of the
week, with Monday being 1 and Sunday being 7.
.IP "\(bu" 4
\&\f(CW$locale\fR\->version
.Sp
The \s-1CLDR\s0 version from which this locale was generated.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted through <https://github.com/houseabsolute/DateTime\-Locale/issues>.
.PP
There is a mailing list available for users of this distribution,
<mailto:datetime@perl.org>.
.PP
I am also usually active on \s-1IRC\s0 as 'drolsky' on \f(CW\*(C`irc://irc.perl.org\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2016 by Dave Rolsky.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
