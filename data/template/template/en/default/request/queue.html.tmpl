use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.26
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => 'request/queue.html.tmpl',
        'modtime' => '1483774492',
    },
    BLOCK => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
$output .=  "\n";
#line 9 "template/en/default/request/queue.html.tmpl"
# USE
$stash->set('Bugzilla',
            $context->plugin('Bugzilla'));
#line 10 "template/en/default/request/queue.html.tmpl"
$stash->set('cgi', $stash->get(['Bugzilla', 0, 'cgi', 0]));
$output .=  "\n";
#line 12 "template/en/default/request/queue.html.tmpl"
$output .=  $context->process('global/js-products.html.tmpl');
$output .=  "\n";
#line 14 "template/en/default/request/queue.html.tmpl"
$output .=  $context->process('global/header.html.tmpl', { 'title' => 'Request Queue', 'generate_api_token' => 1, 'onload' => 'var f = document.request_form; selectProduct(f.product, f.component, \'Any\');', 'javascript_urls' => [ 'js/productform.js', 'js/field.js' ], 'style_urls' => [ 'skins/standard/buglist.css' ], 'yui' => [ 'autocomplete' ] });
$output .=  "\n\n<p>\nWhen you are logged in, only requests made by you or addressed to you\nare shown by default.  You can change the criteria using the form below.\nWhen you are logged out, all pending requests that are not restricted\nto some group are shown by default.\n</p>\n\n<form id=\"request_form\" name=\"request_form\" action=\"request.cgi\" method=\"get\">\n  <input type=\"hidden\" name=\"action\" value=\"queue\">\n\n  <table id=\"filtering\">\n    <tr>\n      <th>Requester:</th>\n      <td>";
#line 37 "template/en/default/request/queue.html.tmpl"
$output .=  $context->include('global/userselect.html.tmpl', { 'id' => 'requester', 'name' => 'requester', 'value' => $stash->get(['cgi', 0, 'param', [ 'requester' ]]), 'size' => 20, 'emptyok' => 1, 'field_title' => 'Requester\'s email address' });
$output .=  "\n      </td>\n      <th>Product:</th>\n      <td>";
#line 48 "template/en/default/request/queue.html.tmpl"
$output .=  $context->include('global/product-select.html.tmpl', { 'id' => 'product', 'name' => 'product', 'add' => 'Any', 'onchange' => 'selectProduct(this, this.form.component, \'Any\');' });
$output .=  "\n      </td>\n      <th>Flag:</th>\n      <td>";
#line 57 "template/en/default/request/queue.html.tmpl"
$output .=  $context->process('global/select-menu.html.tmpl', { 'name' => 'type', 'options' => $stash->get('types'), 'default' => $stash->get(['cgi', 0, 'param', [ 'type' ]]) });
$output .=  "\n      </td>\n\n      ";
$output .=  "\n      <!--\n      <th>Status:</th>\n      <td>\n        ";
$output .=  "\n      </td>\n      -->\n\n    </tr>\n    <tr>\n      <th>Requestee:</th>\n      <td>";
#line 78 "template/en/default/request/queue.html.tmpl"
$output .=  $context->include('global/userselect.html.tmpl', { 'id' => 'requestee', 'name' => 'requestee', 'value' => $stash->get(['cgi', 0, 'param', [ 'requestee' ]]), 'size' => 20, 'emptyok' => 1, 'hyphenok' => 1, 'field_title' => ('' . "Requestee's email address or \"-\" (hyphen) for requests with no requestee") });
$output .=  "\n      </td>\n      <th>Component:</th>\n      <td>\n        <select name=\"component\">\n          <option value=\"\">Any</option>";
#line 95 "template/en/default/request/queue.html.tmpl"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get('components');
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR1:   while (! $_tt_error) {
            $stash->{'comp'} = $_tt_value;
$output .=  "\n            <option value=\"";
#line 93 "template/en/default/request/queue.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get('comp');
    
    &$_tt_filter($output);
};

$output .=  "\" ";
#line 93 "template/en/default/request/queue.html.tmpl"
if ($stash->get(['cgi', 0, 'param', [ 'component' ]]) eq $stash->get('comp')) {
$output .=  'selected';
}

$output .=  ">";
#line 94 "template/en/default/request/queue.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get('comp');
    
    &$_tt_filter($output);
};

$output .=  "</option>";;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

$output .=  "\n        </select>\n      </td>\n      <th>Group By:</th>\n      <td>";
#line 100 "template/en/default/request/queue.html.tmpl"
$stash->set('groups', { 'Requester' => 'requester', 'Requestee' => 'requestee', 'Flag' => 'type', 'Product/Component' => 'category'  });
#line 106 "template/en/default/request/queue.html.tmpl"
$output .=  $context->process('global/select-menu.html.tmpl', { 'name' => 'group', 'options' => $stash->get('groups'), 'default' => $stash->get(['cgi', 0, 'param', [ 'group' ]]) });
$output .=  "\n      </td>\n    </tr>\n    <tr>\n      <th></th>\n      <td>\n        <select id=\"do_union\" name=\"do_union\">\n          <option value=\"0\">Match the requester AND requestee</option>\n          <option value=\"1\" ";
#line 114 "template/en/default/request/queue.html.tmpl"
if ($stash->get(['cgi', 0, 'param', [ 'do_union' ]])) {
$output .=  'selected="selected"';
}

$output .=  ">\n            Match the requester OR requestee</option>\n        </select>\n      </td>\n      <td colspan=\"3\"></td>\n      <td><input type=\"submit\" id=\"filter\" value=\"Filter\"></td>\n    </tr>\n  </table>\n</form>\n";
#line 1 "template/en/default/request/queue.html.tmpl"
$stash->set('column_headers', { 'type' => 'Flag', 'status' => 'Status', 'bug' => ('' . $stash->get(['terms', 0, 'Bug', 0])), 'attachment' => 'Attachment', 'requester' => 'Requester', 'requestee' => 'Requestee', 'created' => 'Created', 'category' => 'Product/Component'  });
$output .=  "\n";
#line 134 "template/en/default/request/queue.html.tmpl"
$stash->set('display_columns', [ 'requester', 'requestee', 'type', 'bug', 'attachment', 'created' ], 1);
$stash->set('group_field', 'Requestee', 1);
$stash->set('group_value', '', 1);
$output .=  "\n";
#line 141 "template/en/default/request/queue.html.tmpl"
if ($stash->get('debug')) {
$output .=  "\n  <p>";
#line 140 "template/en/default/request/queue.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get('query');
    
    &$_tt_filter($output);
};

$output .=  "</p>";
}

$output .=  "\n";
#line 168 "template/en/default/request/queue.html.tmpl"
if ($stash->get(['requests', 0, 'size', 0]) eq 0) {
$output .=  "\n  <p>\n    No requests.\n  </p>";
}
else {
#line 164 "template/en/default/request/queue.html.tmpl"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get('requests');
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR1:   while (! $_tt_error) {
            $stash->{'request'} = $_tt_value;
#line 153 "template/en/default/request/queue.html.tmpl"
if ($stash->get(['request', 0, $stash->get('group_field'), 0]) ne $stash->get('group_value') || $stash->get(['loop', 0, 'first', 0])) {
#line 150 "template/en/default/request/queue.html.tmpl"
$stash->set('group_value', $stash->get(['request', 0, $stash->get('group_field'), 0]));
#line 151 "template/en/default/request/queue.html.tmpl"
if (!($stash->get(['loop', 0, 'first', 0]))) {
$output .=  $context->process('display_buglist');
}

#line 152 "template/en/default/request/queue.html.tmpl"
$output .=  $context->process('start_new_table');
}

#line 154 "template/en/default/request/queue.html.tmpl"
$stash->set(['buglist', 0, $stash->get(['request', 0, 'bug_id', 0]), 0], 1);
$output .=  "\n    <tr>";
#line 162 "template/en/default/request/queue.html.tmpl"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get('display_columns');
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR2:   while (! $_tt_error) {
            $stash->{'column'} = $_tt_value;
#line 157 "template/en/default/request/queue.html.tmpl"
if ($stash->get('column') eq $stash->get('group_field') || $stash->get(['excluded_columns', 0, 'contains', [ $stash->get('column') ]])) {
($_tt_value, $_tt_error) = $_tt_list->get_next();
next FOR2;

}

$output .=  "\n        <td>";
#line 1 "template/en/default/request/queue.html.tmpl"
$output .=  $context->process(("display_" . $stash->get('column')));
#line 160 "template/en/default/request/queue.html.tmpl"
$output .=  $stash->get(['Hook', 0, 'process', [ 'after_column' ]]);
$output .=  "\n        </td>";;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

$output .=  "\n    </tr>";;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

#line 165 "template/en/default/request/queue.html.tmpl"
$output .=  $context->process('display_buglist');
$output .=  "\n  <br><br>\n  <a href=\"request.cgi?";
#line 167 "template/en/default/request/queue.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get('urlquerypart');
    
    &$_tt_filter($output);
};

$output .=  "&amp;ctype=csv\">View entire list as CSV</a>";
}

$output .=  "\n";
#line 170 "template/en/default/request/queue.html.tmpl"
$output .=  $context->process('global/footer.html.tmpl');
$output .=  "\n";

$output .=  "\n";

$output .=  "\n";

$output .=  "\n";

$output .=  "\n";

$output .=  "\n";

$output .=  "\n";

$output .=  "\n";

$output .=  "\n";

$output .=  "\n";
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
    DEFBLOCKS => {
        'display_bug' => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
$output .=  "\n  <a href=\"show_bug.cgi?id=";
#line 195 "template/en/default/request/queue.html.tmpl"
$output .=  $stash->get(['request', 0, 'bug_id', 0]);
$output .=  "\"";
#line 196 "template/en/default/request/queue.html.tmpl"
if ($stash->get(['request', 0, 'restricted', 0])) {
$output .=  ' class="bz_secure"';
}

$output .=  ">";
#line 197 "template/en/default/request/queue.html.tmpl"
$output .=  $stash->get(['request', 0, 'bug_id', 0]);
$output .=  ": ";
#line 197 "template/en/default/request/queue.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['request', 0, 'bug_summary', 0]);
    
    &$_tt_filter($output);
};

$output .=  "</a>";
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
        'display_requester' => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
#line 214 "template/en/default/request/queue.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);


# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('email')
              || $context->throw($context->error);

$output .=  $stash->get(['request', 0, 'requester', 0]);
    
    &$_tt_filter($output);
};

    
    &$_tt_filter($output);
};

    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
        'display_requestee' => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
#line 210 "template/en/default/request/queue.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);


# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('email')
              || $context->throw($context->error);

$output .=  $stash->get(['request', 0, 'requestee', 0]);
    
    &$_tt_filter($output);
};

    
    &$_tt_filter($output);
};

    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
        'display_created' => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
#line 218 "template/en/default/request/queue.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('time')
              || $context->throw($context->error);

$output .=  $stash->get(['request', 0, 'created', 0]);
    
    &$_tt_filter($output);
};

    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
        'display_type' => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
#line 187 "template/en/default/request/queue.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['request', 0, 'type', 0]);
    
    &$_tt_filter($output);
};

    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
        'display_buglist' => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
$output .=  "\n  </table>";
#line 223 "template/en/default/request/queue.html.tmpl"
if (!($stash->get(['buglist', 0, 'keys', 0, 'size', 0]))) {
next ;
}

$output .=  "\n  <a href=\"buglist.cgi?bug_id=";
#line 225 "template/en/default/request/queue.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['buglist', 0, 'keys', 0, 'nsort', 0, 'join', [ ',' ]]);
    
    &$_tt_filter($output);
};

$output .=  "\">View as\n  ";
#line 226 "template/en/default/request/queue.html.tmpl"
$output .=  $stash->get(['terms', 0, 'bug', 0]);
$output .=  " list</a>";
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
        'display_status' => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
#line 191 "template/en/default/request/queue.html.tmpl"
$output .=  $stash->get(['request', 0, 'status', 0]);
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
        'start_new_table' => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
#line 173 "template/en/default/request/queue.html.tmpl"
$stash->set('buglist', {   });
$output .=  "\n\n  <h3>";
#line 175 "template/en/default/request/queue.html.tmpl"
$output .=  $stash->get(['column_headers', 0, $stash->get('group_field'), 0]);
$output .=  ": \n    ";
#line 176 "template/en/default/request/queue.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);


# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('email')
              || $context->throw($context->error);

$output .=  ($stash->get(['request', 0, $stash->get('group_field'), 0]) || 'None');
    
    &$_tt_filter($output);
};

    
    &$_tt_filter($output);
};

$output .=  "</h3>\n  <table class=\"requests\">\n    <tr>";
#line 182 "template/en/default/request/queue.html.tmpl"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get('display_columns');
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR1:   while (! $_tt_error) {
            $stash->{'column'} = $_tt_value;
#line 180 "template/en/default/request/queue.html.tmpl"
if ($stash->get('column') eq $stash->get('group_field') || $stash->get(['excluded_columns', 0, 'contains', [ $stash->get('column') ]])) {
($_tt_value, $_tt_error) = $_tt_list->get_next();
next FOR1;

}

$output .=  "\n        <th>";
#line 181 "template/en/default/request/queue.html.tmpl"
$output .=  $stash->get(['column_headers', 0, $stash->get('column'), 0]);
$output .=  "</th>";;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

$output .=  "\n    </tr>";
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
        'display_attachment' => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
#line 206 "template/en/default/request/queue.html.tmpl"
if ($stash->get(['request', 0, 'attach_id', 0])) {
$output .=  "\n    <a href=\"attachment.cgi?id=";
#line 202 "template/en/default/request/queue.html.tmpl"
$output .=  $stash->get(['request', 0, 'attach_id', 0]);
$output .=  "&amp;action=edit\">";
#line 203 "template/en/default/request/queue.html.tmpl"
$output .=  $stash->get(['request', 0, 'attach_id', 0]);
$output .=  ": ";
#line 203 "template/en/default/request/queue.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['request', 0, 'attach_summary', 0]);
    
    &$_tt_filter($output);
};

$output .=  "</a>";
}
else {
$output .=  "\n    N/A";
}

    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
    },
});
