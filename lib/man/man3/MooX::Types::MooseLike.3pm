.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooX::Types::MooseLike 3pm"
.TH MooX::Types::MooseLike 3pm "2015-06-27" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooX::Types::MooseLike \- some Moosish types and a type builder
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  package MyApp::Types;
\&  use MooX::Types::MooseLike;
\&  use base qw(Exporter);
\&  our @EXPORT_OK = ();
\&
\&  # Define some types
\&  my $defs = [{
\&    name => \*(AqMyType\*(Aq,
\&    test => sub { predicate($_[0]) },
\&    message => sub { "$_[0] is not the type we want!" }
\&  },
\&  {
\&    name => \*(AqVarChar\*(Aq,
\&    test => sub {
\&      my ($value, $param) = @_;
\&      length($value) <= $param;
\&    },
\&    message => sub { "$_[0] is too large! It should be less than or equal to $_[1]." }
\&  }];
\&
\&  # Make the types available \- this adds them to @EXPORT_OK automatically.
\&  MooX::Types::MooseLike::register_types($defs, _\|_PACKAGE_\|_);
\&
\&  ...
\&
\&  # Somewhere in code that uses the type
\&  package MyApp::Foo;
\&  use Moo;
\&  use MyApp::Types qw(MyType VarChar);
\&
\&  has attribute => (
\&    is  => \*(Aqro\*(Aq,
\&    isa => MyType,
\&  );
\&
\&  has string => (
\&    is  => \*(Aqro\*(Aq,
\&    isa => VarChar[25]
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a possibility to build your own set of Moose-like types. These custom types can then be used to describe fields in Moo-based classes.
.PP
See MooX::Types::MooseLike::Base for a list of available base types.
Its source also provides an example of how to build base types, along with both parameterizable and non-parameterizable.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "register_types"
.IX Subsection "register_types"
\&\fBregister_types( types, package, moose_namespace )\fR
.PP
Install the given types within the package. This makes the types automatically exportable by adding them to \f(CW@EXPORT_OK\fR of the package. Types are expected to be an array ref where every type is of the following format:
.PP
.Vb 9
\&  {
\&    name            => \*(AqMyType\*(Aq,
\&    test            => sub { check_the_value_somehow($_[0]) },
\&    message         => sub { "$_[0] is not the type we want!" },
\&    subtype_of      => \*(AqSomeParentType\*(Aq,           # Optional
\&    from            => \*(AqSome::Parent::CoolTypes\*(Aq,  # Optional
\&    parameterizable => sub { ... },                # Optional
\&    inflate         => sub { ... },                # Optional
\&  }
.Ve
.PP
A type can be declared with a reference (\fIsubtype_of\fR) to some previously declared type. In this case the new type will inherit the behaviour of the referenced type.
.PP
The referenced type can come either from the same package or from a third party package:
.PP
.Vb 7
\&  MooX::Types::MooseLike::register_types([{
\&    name       => \*(AqGreaterThan10\*(Aq,
\&    subtype_of => \*(AqInt\*(Aq,
\&    from       => \*(AqMooX::Types::MooseLike::Base\*(Aq,
\&    test       => sub { $_[0] > 10 },
\&    message    => sub { \*(Aqnot greater than 10\*(Aq },
\&  }], _\|_PACKAGE_\|_);
\&
\&  MooX::Types::MooseLike::register_types([{
\&    name       => \*(AqBetween10And20\*(Aq,
\&    subtype_of => \*(AqGreaterThan10\*(Aq,
\&    from       => _\|_PACKAGE_\|_,
\&    test       => sub { $_[0] < 20 },
\&    message    => sub { \*(Aqnot an integer between 10 and 20\*(Aq },
\&  }], _\|_PACKAGE_\|_);
\&
\&  MooX::Types::MooseLike::register_types([{
\&    name       => \*(AqBetween10And30\*(Aq,
\&    subtype_of => GreaterThan10(),
\&    test       => sub { $_[0] < 30 },
\&    message    => sub { \*(Aqnot an integer between 10 and 30\*(Aq },
\&  }], _\|_PACKAGE_\|_);
.Ve
.SS "exception_message"
.IX Subsection "exception_message"
\&\fBexception_message( value, part_of_the_exception_string )\fR
.PP
Helper function to be used in a type definition:
.PP
.Vb 5
\&  {
\&    ...
\&    message => sub { return exception_message($_[0], \*(Aqa HashRef\*(Aq },
\&    ...
\&  }
.Ve
.PP
In the event of <value> mismatching the type constraints it produces the message:
.PP
.Vb 1
\&  "<value> is not a HashRef!"
.Ve
.SS "inflate_type"
.IX Subsection "inflate_type"
\&\fBinflate_type( coderef )\fR
.PP
Inflates the type to a Moose type. Requires Moose.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MooX::Types::MooseLike::Numeric \- an example of building subtypes.
.PP
MooX::Types::SetObject \- an example of building parameterized types.
.PP
MooX::Types::MooseLike::Email, MooX::Types::MooseLike::DateTime
.PP
Type::Tiny \- another implementation of type constraints. Compatible with Moo, Moose and Mouse.
.SH "AUTHOR"
.IX Header "AUTHOR"
mateu \- Mateu X. Hunter (cpan:MATEU) <hunter@missoula.org>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
mst \- Matt S. Trout (cpan:MSTROUT) <mst@shadowcat.co.uk>
.PP
Mithaldu \- Christian Walde (cpan:MITHALDU) <walde.christian@googlemail.com>
.PP
Matt Phillips (cpan:MATTP) <mattp@cpan.org>
.PP
Arthur Axel fREW Schmidt (cpan:FREW) <frioux@gmail.com>
.PP
Toby Inkster (cpan:TOBYINK) <tobyink@cpan.org>
.PP
Graham Knop (cpan:HAARG) <haarg@cpan.org>
.PP
Dmitry Matrosov (cpan:AMIDOS) <amidos@amidos.ru>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2011\-2015 the MooX::Types::MooseLike \*(L"\s-1AUTHOR\*(R"\s0 and
 \*(L"\s-1CONTRIBUTORS\*(R"\s0 as listed above.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software and may be distributed under the same terms
as perl itself.
