use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.26
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1483774492',
        'name' => 'admin/params/advanced.html.tmpl',
    },
    BLOCK => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
$output .=  "\n";
#line 10 "template/en/default/admin/params/advanced.html.tmpl"
$stash->set('title', 'Advanced');
$stash->set('desc', 'Settings for advanced configurations.');
$output .=  "\n";
#line 41 "template/en/default/admin/params/advanced.html.tmpl"

# CAPTURE
$stash->set('sts_desc', do {
    my $output = '';
$output .=  "\n  Enables the sending of the \n  <a href=\"http://en.wikipedia.org/wiki/Strict_Transport_Security\">Strict-Transport-Security</a>\n  header along with HTTP responses on SSL connections. This adds greater\n  security to your SSL connections by forcing the browser to always\n  access your domain over SSL and never accept an invalid certificate. \n  However, it should only be used if you have the <code>ssl_redirect</code>\n  parameter turned on, Bugzilla is the only thing running\n  on its domain (i.e., your <code>urlbase</code> is something like\n  <code>http://bugzilla.example.com/</code>), and you never plan to disable\n  the <code>ssl_redirect</code> parameter.\n  <ul>\n    <li>\n      off - Don't send the Strict-Transport-Security header with requests.\n    </li>\n    <li>\n      this_domain_only - Send the Strict-Transport-Security header with all\n      requests, but only support it for the current domain.\n    </li>\n    <li>\n      include_subdomains - Send the Strict-Transport-Security header along\n      with the <code>includeSubDomains</code> flag, which will apply the\n      security change to all subdomains. This is especially useful when\n      combined with an <code>attachment_base</code> that exists as (a)\n      subdomain(s) under the main Bugzilla domain.\n    </li>\n  </ul>";
    $output;
});

$output .=  "\n";
#line 43 "template/en/default/admin/params/advanced.html.tmpl"
$stash->set('param_descs', { 'cookiedomain' => 'If your website is at \'www.foo.com\', setting this to'  . ' \'.foo.com\' will also allow \'bar.foo.com\' to access'  . ' Bugzilla cookies. This is useful if you have more than'  . ' one hostname pointing at the same web server, and you'  . ' want them to share the Bugzilla cookie.', 'inbound_proxies' => 'When inbound traffic to Bugzilla goes through a proxy,'  . ' Bugzilla thinks that the IP address of every single'  . ' user is the IP address of the proxy. If you enter a comma-separated'  . ' list of IPs in this parameter, then Bugzilla will trust any'  . ' <code>X-Forwarded-For</code> header sent from those IPs,'  . ' and use the value of that header as the end user\'s IP address.', 'proxy_url' => 'Bugzilla may have to access the web to get notifications about'  . ' new releases (see the <var>upgrade_notification</var> parameter).'  . ' If your Bugzilla server is behind a proxy, it may be'  . ' necessary to enter its URL if the web server cannot access the'  . ' HTTP_PROXY environment variable. If you have to authenticate,'  . ' use the <code>http://user:pass@proxy_url/</code> syntax.', 'strict_transport_security' => $stash->get('sts_desc')  });
$output .=  "\n";
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
    DEFBLOCKS => {

    },
});
