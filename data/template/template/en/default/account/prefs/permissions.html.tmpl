use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.26
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => 'account/prefs/permissions.html.tmpl',
        'modtime' => '1483774492',
    },
    BLOCK => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
$output .=  "\n\n";
$output .=  "\n\n    <div id=\"permissions\">";
#line 50 "template/en/default/account/prefs/permissions.html.tmpl"
if ($stash->get(['has_bits', 0, 'size', 0])) {
$output .=  "\n        <p>You have the following permission bits set on your account:</p>\n\n        <table>";
#line 30 "template/en/default/account/prefs/permissions.html.tmpl"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get('has_bits');
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR1:   while (! $_tt_error) {
            $stash->{'bit_description'} = $_tt_value;
$output .=  "\n            <tr>\n              <td>";
#line 27 "template/en/default/account/prefs/permissions.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['bit_description', 0, 'name', 0]);
    
    &$_tt_filter($output);
};

$output .=  "</td>\n              <td>";
#line 28 "template/en/default/account/prefs/permissions.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html_light')
              || $context->throw($context->error);

$output .=  $stash->get(['bit_description', 0, 'desc', 0]);
    
    &$_tt_filter($output);
};

$output .=  "</td>\n            </tr>";;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

$output .=  "\n        </table>\n";
#line 46 "template/en/default/account/prefs/permissions.html.tmpl"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = [ 'editcomponents', 'canconfirm', 'editbugs' ];
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR1:   while (! $_tt_error) {
            $stash->{'privs'} = $_tt_value;
#line 1 "template/en/default/account/prefs/permissions.html.tmpl"
$stash->set('products', $stash->get(("local_" . $stash->get('privs'))));
#line 45 "template/en/default/account/prefs/permissions.html.tmpl"
if ($stash->get('products') && $stash->get(['products', 0, 'size', 0])) {
$output .=  "\n            <p>\n              You also have local '";
#line 37 "template/en/default/account/prefs/permissions.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get('privs');
    
    &$_tt_filter($output);
};

$output .=  "' privileges\n              for the following products:\n            </p>\n            <ul>";
#line 43 "template/en/default/account/prefs/permissions.html.tmpl"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get('products');
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR2:   while (! $_tt_error) {
            $stash->{'product'} = $_tt_value;
$output .=  "\n                <li>";
#line 42 "template/en/default/account/prefs/permissions.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['product', 0, 'name', 0]);
    
    &$_tt_filter($output);
};

$output .=  "</li>";;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

$output .=  "\n            </ul>";
}
;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

$output .=  "\n";
}
else {
$output .=  "\n        <p>There are no permission bits set on your account.</p>";
}

$output .=  "\n";
#line 71 "template/en/default/account/prefs/permissions.html.tmpl"
if ($stash->get(['user', 0, 'in_group', [ 'editusers' ]])) {
$output .=  "\n        <p>\n          You have editusers privileges. You can turn on and off all\n          permissions for all users.\n        </p>";
}
elsif ($stash->get(['set_bits', 0, 'size', 0])) {
$output .=  "\n        <p>\n          And you can turn on or off the following bits for\n          <a href=\"editusers.cgi\">other users</a>:\n        </p>\n\n        <table>";
#line 69 "template/en/default/account/prefs/permissions.html.tmpl"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get('set_bits');
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR1:   while (! $_tt_error) {
            $stash->{'bit_description'} = $_tt_value;
$output .=  "\n            <tr>\n              <td>";
#line 66 "template/en/default/account/prefs/permissions.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['bit_description', 0, 'name', 0]);
    
    &$_tt_filter($output);
};

$output .=  "</td>\n              <td>";
#line 67 "template/en/default/account/prefs/permissions.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html_light')
              || $context->throw($context->error);

$output .=  $stash->get(['bit_description', 0, 'desc', 0]);
    
    &$_tt_filter($output);
};

$output .=  "</td>\n            </tr>";;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

$output .=  "\n        </table>";
}

$output .=  "\n";
#line 78 "template/en/default/account/prefs/permissions.html.tmpl"
if ($stash->get(['user', 0, 'in_group', [ 'bz_sudoers' ]])) {
$output .=  "\n        <p>\n          You are a member of the <b>bz_sudoers</b> group, so you can\n          <a href=\"relogin.cgi?action=prepare-sudo\">impersonate someone else</a>.\n        </p>";
}

$output .=  "\n    </div>\n";
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
    DEFBLOCKS => {

    },
});
