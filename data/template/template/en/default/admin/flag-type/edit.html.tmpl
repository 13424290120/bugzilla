use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.26
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => 'admin/flag-type/edit.html.tmpl',
        'modtime' => '1483774492',
    },
    BLOCK => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
$output .=  "\n";
#line 9 "template/en/default/admin/flag-type/edit.html.tmpl"
$output .=  $context->process('global/js-products.html.tmpl');
$output .=  "\n";
#line 20 "template/en/default/admin/flag-type/edit.html.tmpl"
if ($stash->get('action') eq 'insert') {
#line 17 "template/en/default/admin/flag-type/edit.html.tmpl"

# CAPTURE
$stash->set('title', do {
    my $output = '';
$output .=  "\n    Create Flag Type for ";
#line 13 "template/en/default/admin/flag-type/edit.html.tmpl"
$output .=  $stash->get(['type', 0, 'target_type', 0]) eq 'bug' ? $stash->get(['terms', 0, 'Bugs', 0]) : 'Attachments';
#line 16 "template/en/default/admin/flag-type/edit.html.tmpl"
if ($stash->get(['type', 0, 'id', 0])) {
$output .=  "\n      Based on ";
#line 15 "template/en/default/admin/flag-type/edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['type', 0, 'name', 0]);
    
    &$_tt_filter($output);
};

}

    $output;
});

}
else {
#line 19 "template/en/default/admin/flag-type/edit.html.tmpl"

# CAPTURE
$stash->set('title', do {
    my $output = '';
$output .=  "Edit Flag Type ";
#line 19 "template/en/default/admin/flag-type/edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['type', 0, 'name', 0]);
    
    &$_tt_filter($output);
};

    $output;
});

}

$output .=  "\n";
#line 22 "template/en/default/admin/flag-type/edit.html.tmpl"
$output .=  $context->process('global/header.html.tmpl', { 'title' => $stash->get('title'), 'style_urls' => [ 'skins/standard/admin.css' ], 'onload' => 'var f = document.forms[\'flagtype_properties\'];
          selectProduct(f.product, f.component, \'__Any__\');', 'javascript_urls' => [ 'js/productform.js' ], 'doc_section' => 'administering/flags.html' });
$output .=  "\n\n<form id=\"flagtype_properties\" method=\"post\" action=\"editflagtypes.cgi\">\n  <input type=\"hidden\" name=\"action\" value=\"";
#line 32 "template/en/default/admin/flag-type/edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get('action');
    
    &$_tt_filter($output);
};

$output .=  "\">\n  <input type=\"hidden\" name=\"can_fully_edit\" value=\"";
#line 33 "template/en/default/admin/flag-type/edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get('can_fully_edit');
    
    &$_tt_filter($output);
};

$output .=  "\">\n  <input type=\"hidden\" name=\"id\" value=\"";
#line 34 "template/en/default/admin/flag-type/edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['type', 0, 'id', 0]);
    
    &$_tt_filter($output);
};

$output .=  "\">\n  <input type=\"hidden\" name=\"token\" value=\"";
#line 35 "template/en/default/admin/flag-type/edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get('token');
    
    &$_tt_filter($output);
};

$output .=  "\">\n  <input type=\"hidden\" name=\"target_type\" value=\"";
#line 36 "template/en/default/admin/flag-type/edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['type', 0, 'target_type', 0]);
    
    &$_tt_filter($output);
};

$output .=  "\">\n  <input type=\"hidden\" name=\"check_clusions\" value=\"";
#line 37 "template/en/default/admin/flag-type/edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('none')
              || $context->throw($context->error);

$output .=  $stash->get('check_clusions');
    
    &$_tt_filter($output);
};

$output .=  "\">";
#line 40 "template/en/default/admin/flag-type/edit.html.tmpl"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get(['inclusions', 0, 'values', 0]);
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR1:   while (! $_tt_error) {
            $stash->{'category'} = $_tt_value;
$output .=  "\n    <input type=\"hidden\" name=\"inclusions\" value=\"";
#line 39 "template/en/default/admin/flag-type/edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get('category');
    
    &$_tt_filter($output);
};

$output .=  "\">";;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

#line 43 "template/en/default/admin/flag-type/edit.html.tmpl"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get(['exclusions', 0, 'values', 0]);
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR1:   while (! $_tt_error) {
            $stash->{'category'} = $_tt_value;
$output .=  "\n    <input type=\"hidden\" name=\"exclusions\" value=\"";
#line 42 "template/en/default/admin/flag-type/edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get('category');
    
    &$_tt_filter($output);
};

$output .=  "\">";;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

$output .=  "\n\n  ";
$output .=  "\n  <input type=\"submit\" id=\"commit\" value=\"Submit\" class=\"bz_default_hidden\">\n\n  <table id=\"admin_table_edit\">\n    <tr>\n      <th>Name:</th>\n      <td>\n        a short name identifying this type.<br>\n        <input type=\"text\" name=\"name\" value=\"";
#line 54 "template/en/default/admin/flag-type/edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['type', 0, 'name', 0]);
    
    &$_tt_filter($output);
};

$output .=  "\" size=\"50\"\n               maxlength=\"50\" ";
#line 55 "template/en/default/admin/flag-type/edit.html.tmpl"
if (!($stash->get('can_fully_edit'))) {
$output .=  ' disabled="disabled"';
}

$output .=  " required>\n      </td>\n    </tr>\n\n    <tr>\n      <th>Description:</th>\n      <td>\n        a comprehensive description of this type.<br>";
#line 63 "template/en/default/admin/flag-type/edit.html.tmpl"
$output .=  $context->include('global/textarea.html.tmpl', { 'name' => 'description', 'minrows' => 4, 'cols' => 80, 'defaultcontent' => $stash->get(['type', 0, 'description', 0]), 'disabled' => ! $stash->get('can_fully_edit'), 'mandatory' => 1 });
$output .=  "\n      </td>\n    </tr>\n\n    <tr>\n      <th>Category:</th>\n\n      <td>\n        the products/components to which ";
#line 78 "template/en/default/admin/flag-type/edit.html.tmpl"
$output .=  $stash->get(['type', 0, 'target_type', 0]) eq 'bug' ? $stash->get(['terms', 0, 'bugs', 0]) : 'attachments';
$output .=  "\n        must (inclusions) or must not (exclusions) belong in order for users\n        to be able to set flags of this type for them.";
#line 86 "template/en/default/admin/flag-type/edit.html.tmpl"
if (!($stash->get('can_fully_edit'))) {
$output .=  "\n          <p class=\"warning\">This flagtype also applies to some products you are not allowed\n          to edit (and so which are not displayed in the lists below). Your limited privileges\n          means you are only allowed to add and remove this flagtype to/from products you can\n          edit, but not to edit other properties of the flagtype.</p>";
}

$output .=  "\n        <table>\n          <tr>\n            <th class=\"top left\">\n              Product/Component:<br>";
#line 91 "template/en/default/admin/flag-type/edit.html.tmpl"
$output .=  $context->include('global/product-select.html.tmpl', { 'id' => 'product', 'name' => 'product', 'add' => '__Any__', 'onchange' => 'selectProduct(this, this.form.component, \'__Any__\');', 'products' => $stash->get('products') });
$output .=  "<br>\n              <select name=\"component\">\n                <option value=\"\">__Any__</option>";
#line 102 "template/en/default/admin/flag-type/edit.html.tmpl"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get('components');
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR1:   while (! $_tt_error) {
            $stash->{'comp'} = $_tt_value;
$output .=  "\n                  <option value=\"";
#line 101 "template/en/default/admin/flag-type/edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get('comp');
    
    &$_tt_filter($output);
};

$output .=  "\">";
#line 101 "template/en/default/admin/flag-type/edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get('comp');
    
    &$_tt_filter($output);
};

$output .=  "</option>";;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

$output .=  "\n              </select><br>\n              <input type=\"submit\" id=\"categoryAction-include\" \n                                   name=\"categoryAction-include\" value=\"Include\">\n              <input type=\"submit\" id=\"categoryAction-exclude\"\n                                   name=\"categoryAction-exclude\" value=\"Exclude\">\n            </th>\n            <th class=\"top left\">\n              Inclusions:<br>";
#line 111 "template/en/default/admin/flag-type/edit.html.tmpl"
$output .=  $context->process('category_select', { 'name' => 'inclusion_to_remove', 'categories' => $stash->get('inclusions') });
$output .=  "<br>\n              <input type=\"submit\" id=\"categoryAction-removeInclusion\" \n                     name=\"categoryAction-removeInclusion\" value=\"Remove Inclusion\">\n            </th>\n            <th class=\"top left\">\n              Exclusions:<br>";
#line 117 "template/en/default/admin/flag-type/edit.html.tmpl"
$output .=  $context->process('category_select', { 'name' => 'exclusion_to_remove', 'categories' => $stash->get('exclusions') });
$output .=  "<br>\n              <input type=\"submit\" id=\"categoryAction-removeExclusion\" \n                     name=\"categoryAction-removeExclusion\" value=\"Remove Exclusion\">\n            </th>\n          </tr>\n        </table>\n      </td>\n    </tr>\n\n    <tr>\n      <th>Sort Key:</th>\n      <td>\n        a number between 0 and ";
#line 129 "template/en/default/admin/flag-type/edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('none')
              || $context->throw($context->error);

$output .=  '32767';
    
    &$_tt_filter($output);
};

$output .=  " by which\n        this type will be sorted when displayed to users in a list; ignore if you\n        don't care what order the types appear in or if you want them to appear\n        in alphabetical order.<br>\n        <input type=\"text\" name=\"sortkey\" value=\"";
#line 133 "template/en/default/admin/flag-type/edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['type', 0, 'sortkey', 0]) || 0;
    
    &$_tt_filter($output);
};

$output .=  "\" size=\"5\"\n               maxlength=\"5\" ";
#line 134 "template/en/default/admin/flag-type/edit.html.tmpl"
if (!($stash->get('can_fully_edit'))) {
$output .=  ' disabled="disabled"';
}

$output .=  " required>\n      </td>\n    </tr>\n\n    <tr>\n      <th>&nbsp;</th>\n      <td>\n        <input type=\"checkbox\" id=\"is_active\" name=\"is_active\"";
#line 142 "template/en/default/admin/flag-type/edit.html.tmpl"
if (!($stash->get('can_fully_edit'))) {
$output .=  ' disabled="disabled"';
}

#line 143 "template/en/default/admin/flag-type/edit.html.tmpl"
if ($stash->get(['type', 0, 'is_active', 0]) || ! $stash->get(['type', 0, 'is_active', 0, 'defined', 0])) {
$output .=  ' checked';
}

$output .=  ">\n        <label for=\"is_active\">active (flags of this type appear in the UI and can be set)</label>\n      </td>\n    </tr>\n\n    <tr>\n      <th>&nbsp;</th>\n      <td>\n        <input type=\"checkbox\" id=\"is_requestable\" name=\"is_requestable\"";
#line 152 "template/en/default/admin/flag-type/edit.html.tmpl"
if (!($stash->get('can_fully_edit'))) {
$output .=  ' disabled="disabled"';
}

#line 153 "template/en/default/admin/flag-type/edit.html.tmpl"
if ($stash->get(['type', 0, 'is_requestable', 0]) || ! $stash->get(['type', 0, 'is_requestable', 0, 'defined', 0])) {
$output .=  ' checked';
}

$output .=  ">\n        <label for=\"is_requestable\">requestable (users can ask for flags of this type to be set)</label>\n      </td>\n    </tr>\n\n    <tr>\n      <th>CC List:</th>\n      <td>\n        if requestable, who should get carbon copied on email notification of requests.\n        This is a comma-separated list of full e-mail addresses which do not\n        need to be ";
#line 163 "template/en/default/admin/flag-type/edit.html.tmpl"
$output .=  $stash->get(['terms', 0, 'Bugzilla', 0]);
$output .=  " logins.";
#line 168 "template/en/default/admin/flag-type/edit.html.tmpl"
if ($stash->get(['Param', [ 'emailsuffix' ]])) {
$output .=  "\n          Note that the configured emailsuffix\n          <kbd>";
#line 166 "template/en/default/admin/flag-type/edit.html.tmpl"
$output .=  $stash->get(['Param', [ 'emailsuffix' ]]);
$output .=  "</kbd> will <em>not</em> be appended\n          to these addresses, so you should add it explicitly if so desired.";
}

$output .=  "<br>\n        <input type=\"text\" name=\"cc_list\" value=\"";
#line 169 "template/en/default/admin/flag-type/edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['type', 0, 'cc_list', 0]);
    
    &$_tt_filter($output);
};

$output .=  "\" size=\"80\"\n               maxlength=\"200\" ";
#line 170 "template/en/default/admin/flag-type/edit.html.tmpl"
if (!($stash->get('can_fully_edit'))) {
$output .=  ' disabled="disabled"';
}

$output .=  ">\n      </td>\n    </tr>\n\n    <tr>\n      <th>&nbsp;</th>\n      <td>\n        <input type=\"checkbox\" id=\"is_requesteeble\" name=\"is_requesteeble\"";
#line 178 "template/en/default/admin/flag-type/edit.html.tmpl"
if (!($stash->get('can_fully_edit'))) {
$output .=  ' disabled="disabled"';
}

#line 179 "template/en/default/admin/flag-type/edit.html.tmpl"
if ($stash->get(['type', 0, 'is_requesteeble', 0]) || ! $stash->get(['type', 0, 'is_requesteeble', 0, 'defined', 0])) {
$output .=  ' checked';
}

$output .=  ">\n        <label for=\"is_requesteeble\">specifically requestable (users can ask specific other users\n          to set flags of this type as opposed to just asking the wind)</label>\n      </td>\n    </tr>\n\n    <tr>\n      <th>&nbsp;</th>\n      <td>\n        <input type=\"checkbox\" id=\"is_multiplicable\" name=\"is_multiplicable\"";
#line 189 "template/en/default/admin/flag-type/edit.html.tmpl"
if (!($stash->get('can_fully_edit'))) {
$output .=  ' disabled="disabled"';
}

#line 190 "template/en/default/admin/flag-type/edit.html.tmpl"
if ($stash->get(['type', 0, 'is_multiplicable', 0]) || ! $stash->get(['type', 0, 'is_multiplicable', 0, 'defined', 0])) {
$output .=  ' checked';
}

$output .=  ">\n        <label for=\"is_multiplicable\">multiplicable (multiple flags of this type can be set on\n          the same ";
#line 192 "template/en/default/admin/flag-type/edit.html.tmpl"
$output .=  $stash->get(['type', 0, 'target_type', 0]) eq 'bug' ? $stash->get(['terms', 0, 'bug', 0]) : 'attachment';
$output .=  ")</label>\n      </td>\n    </tr>\n\n    <tr>\n      <th>Grant Group:</th>\n      <td>\n        the group allowed to grant/deny flags of this type\n        (to allow all users to grant/deny these flags, select no group).<br>";
#line 201 "template/en/default/admin/flag-type/edit.html.tmpl"
$output .=  $context->process('group_select', { 'selname' => 'grant_group' });
$output .=  "\n      </td>\n    </tr>\n\n    <tr>\n      <th>Request Group:</th>\n      <td>\n        if flags of this type are requestable, the group allowed to request them\n        (to allow all users to request these flags, select no group).<br>\n        Note that the request group alone has no effect if the grant group is not defined!<br>";
#line 211 "template/en/default/admin/flag-type/edit.html.tmpl"
$output .=  $context->process('group_select', { 'selname' => 'request_group' });
$output .=  "\n      </td>\n    </tr>\n\n    <tr>\n      <th>&nbsp;</th>\n      <td>\n        <input type=\"submit\" id=\"save\" value=\"";
#line 218 "template/en/default/admin/flag-type/edit.html.tmpl"
$output .=  $stash->get('action') eq 'insert' ? 'Create' : 'Save Changes';
$output .=  "\">\n      </td>\n    </tr>\n\n  </table>\n\n</form>\n";
#line 226 "template/en/default/admin/flag-type/edit.html.tmpl"
$output .=  $context->process('global/footer.html.tmpl');
$output .=  "\n\n\n";
$output .=  "\n";
$output .=  "\n";
$output .=  "\n";

$output .=  "\n";

$output .=  "\n";
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
    DEFBLOCKS => {
        'group_select' => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
$output .=  "\n  <select name=\"";
#line 234 "template/en/default/admin/flag-type/edit.html.tmpl"
$output .=  $stash->get('selname');
$output .=  "\" id=\"";
#line 234 "template/en/default/admin/flag-type/edit.html.tmpl"
$output .=  $stash->get('selname');
$output .=  "\" ";
#line 234 "template/en/default/admin/flag-type/edit.html.tmpl"
if (!($stash->get('can_fully_edit'))) {
$output .=  ' disabled="disabled"';
}

$output .=  ">\n    <option value=\"\">(no group)</option>";
#line 236 "template/en/default/admin/flag-type/edit.html.tmpl"
$stash->set('group_found', 0);
#line 245 "template/en/default/admin/flag-type/edit.html.tmpl"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get('groups');
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR1:   while (! $_tt_error) {
            $stash->{'group'} = $_tt_value;
$output .=  "\n      <option value=\"";
#line 238 "template/en/default/admin/flag-type/edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['group', 0, 'name', 0]);
    
    &$_tt_filter($output);
};

$output .=  "\"";
#line 242 "template/en/default/admin/flag-type/edit.html.tmpl"
if ($stash->get(['type', 0, $stash->get('selname'), 0]) && $stash->get(['type', 0, $stash->get('selname'), 0, 'name', 0]) eq $stash->get(['group', 0, 'name', 0])) {
#line 240 "template/en/default/admin/flag-type/edit.html.tmpl"
$output .=  ' selected="selected"';
#line 241 "template/en/default/admin/flag-type/edit.html.tmpl"
$stash->set('group_found', 1);
}

$output .=  ">";
#line 243 "template/en/default/admin/flag-type/edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['group', 0, 'name', 0]);
    
    &$_tt_filter($output);
};

$output .=  "</option>";;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

#line 250 "template/en/default/admin/flag-type/edit.html.tmpl"
if (! $stash->get('group_found') && $stash->get(['type', 0, $stash->get('selname'), 0, 'name', 0])) {
$output .=  "\n      <option value=\"";
#line 247 "template/en/default/admin/flag-type/edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['type', 0, $stash->get('selname'), 0, 'name', 0]);
    
    &$_tt_filter($output);
};

$output .=  "\" selected=\"selected\">";
#line 248 "template/en/default/admin/flag-type/edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['type', 0, $stash->get('selname'), 0, 'name', 0]);
    
    &$_tt_filter($output);
};

$output .=  "</option>";
}

$output .=  "\n  </select>";
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
        'category_select' => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
$output .=  "\n  <select name=\"";
#line 255 "template/en/default/admin/flag-type/edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get('name');
    
    &$_tt_filter($output);
};

$output .=  "\" multiple=\"multiple\" size=\"7\">";
#line 260 "template/en/default/admin/flag-type/edit.html.tmpl"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get(['categories', 0, 'keys', 0, 'sort', 0]);
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR1:   while (! $_tt_error) {
            $stash->{'option'} = $_tt_value;
$output .=  "\n      <option value=\"";
#line 257 "template/en/default/admin/flag-type/edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['categories', 0, $stash->get('option'), 0]);
    
    &$_tt_filter($output);
};

$output .=  "\">";
#line 258 "template/en/default/admin/flag-type/edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get('option');
    
    &$_tt_filter($output);
};

$output .=  "\n      </option>";;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

$output .=  "\n  </select>";
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
    },
});
