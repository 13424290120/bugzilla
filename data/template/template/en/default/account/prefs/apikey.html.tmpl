use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.26
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => 'account/prefs/apikey.html.tmpl',
        'modtime' => '1483774492',
    },
    BLOCK => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
$output .=  "\n\n";
$output .=  "\n\n<p>\n  API keys are used to authenticate WebService API calls. You can create more than\n  one API key if required. Each API key has an optional description which can help\n  you record what each key is used for. Documentation on how to log in is\n  available from\n  <a href=\"";
#line 19 "template/en/default/account/prefs/apikey.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get('docs_urlbase');
    
    &$_tt_filter($output);
};

$output .=  "api/core/v1/general.html#authentication\">here</a>.\n</p>\n\n<h3>Existing API keys</h3>\n\n<p>You can update the description, and revoke or unrevoke existing API keys\nhere.</p>\n\n<table id=\"email_prefs\">\n  <tr class=\"column_header\">\n    <th>API key</th>\n    <th>Description (optional)</th>\n    <th>Last used</th>\n    <th>Revoked</th>\n  </tr>\n";
#line 55 "template/en/default/account/prefs/apikey.html.tmpl"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get('api_keys');
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR1:   while (! $_tt_error) {
            $stash->{'api_key'} = $_tt_value;
$output .=  "\n    <tr";
#line 36 "template/en/default/account/prefs/apikey.html.tmpl"
if ($stash->get(['api_key', 0, 'revoked', 0])) {
$output .=  " class=\"apikey_revoked\"";
}

$output .=  ">\n      <td>";
#line 37 "template/en/default/account/prefs/apikey.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['api_key', 0, 'api_key', 0]);
    
    &$_tt_filter($output);
};

$output .=  "</td>\n      <td>\n        <input name=\"description_";
#line 39 "template/en/default/account/prefs/apikey.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['api_key', 0, 'id', 0]);
    
    &$_tt_filter($output);
};

$output .=  "\"\n          id=\"description_";
#line 40 "template/en/default/account/prefs/apikey.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['api_key', 0, 'id', 0]);
    
    &$_tt_filter($output);
};

$output .=  "\"\n          value=\"";
#line 41 "template/en/default/account/prefs/apikey.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['api_key', 0, 'description', 0]);
    
    &$_tt_filter($output);
};

$output .=  "\">\n      </td>";
#line 47 "template/en/default/account/prefs/apikey.html.tmpl"
if ($stash->get(['api_key', 0, 'last_used', 0])) {
$output .=  "\n        <td>";
#line 44 "template/en/default/account/prefs/apikey.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('time')
              || $context->throw($context->error);

$output .=  $stash->get(['api_key', 0, 'last_used', 0]);
    
    &$_tt_filter($output);
};

$output .=  "</td>";
}
else {
$output .=  "\n        <td class=\"center\"><i>never used</i></td>";
}

$output .=  "\n      <td class=\"center\">\n        <input type=\"checkbox\" value=\"1\"\n          name=\"revoked_";
#line 50 "template/en/default/account/prefs/apikey.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['api_key', 0, 'id', 0]);
    
    &$_tt_filter($output);
};

$output .=  "\"\n          id=\"revoked_";
#line 51 "template/en/default/account/prefs/apikey.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['api_key', 0, 'id', 0]);
    
    &$_tt_filter($output);
};

$output .=  "\"";
#line 52 "template/en/default/account/prefs/apikey.html.tmpl"
if ($stash->get(['api_key', 0, 'revoked', 0])) {
$output .=  " checked=\"checked\" ";
}

$output .=  ">\n      </td>\n    </tr>";;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

#line 58 "template/en/default/account/prefs/apikey.html.tmpl"
if (!($stash->get(['api_keys', 0, 'size', 0]))) {
$output .=  "\n    <tr><td colspan=\"4\">You don't have any API keys.</td></tr>";
}

$output .=  "\n</table>\n";
#line 71 "template/en/default/account/prefs/apikey.html.tmpl"
if ($stash->get('any_revoked')) {
$output .=  "\n  <a id=\"apikey_revoked_controller\" class=\"bz_default_hidden\"\n     href=\"javascript:TUI_toggle_class('apikey_revoked')\">Hide Revoked Keys</a>\n  ";
$output .=  "\n  <script type=\"text/javascript\">\n    TUI_hide_default('apikey_revoked');\n    TUI_alternates['apikey_revoked'] = 'Show Revoked Keys';\n    YAHOO.util.Dom.removeClass('apikey_revoked_controller',\n                               'bz_default_hidden');\n  </script>";
}

$output .=  "\n\n<h3>New API key</h3>\n\n<p>You can generate a new API key by ticking the check box below and optionally\nproviding a description for the API key. The API key will be randomly\ngenerated for you.</p>\n\n<p>\n  <input type=\"checkbox\" name=\"new_key\" id=\"new_key\">\n  Generate a new API key with optional description\n  <input name=\"new_description\" id=\"new_description\">\n</p>\n\n";
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
    DEFBLOCKS => {

    },
});
