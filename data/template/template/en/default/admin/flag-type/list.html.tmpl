use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.26
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => 'admin/flag-type/list.html.tmpl',
        'modtime' => '1483774492',
    },
    BLOCK => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
$output .=  "\n";
#line 9 "template/en/default/admin/flag-type/list.html.tmpl"
$output .=  $context->process('global/js-products.html.tmpl');
$output .=  "\n";
#line 11 "template/en/default/admin/flag-type/list.html.tmpl"
$output .=  $context->process('global/header.html.tmpl', { 'title' => 'Administer Flag Types', 'style_urls' => [ 'skins/standard/admin.css' ], 'onload' => 'var f = document.flagtype_form; selectProduct(f.product, f.component, \'__All__\');', 'javascript_urls' => [ 'js/productform.js' ], 'doc_section' => 'administering/flags.html' });
$output .=  "\n\n<p>\n  Flags are markers that identify whether ";
#line 20 "template/en/default/admin/flag-type/list.html.tmpl"
$output .=  $stash->get(['terms', 0, 'abug', 0]);
$output .=  " or attachment has been granted\n  or denied some status.  Flags appear in the UI as a name and a status symbol\n  (\"+\" for granted, \"-\" for denied, and \"?\" for statuses requested by users).\n</p>\n\n<p>\n  For example, you might define a \"review\" status for users to request review\n  for their patches.  When a patch writer requests review, the string \"review?\"\n  will appear in the attachment.  When a patch reviewer reviews the patch,\n  either the string \"review+\" or the string \"review-\" will appear in the patch,\n  depending on whether the patch passed or failed review.\n</p>\n\n<p>\n  You can restrict the list of flag types to those available for a given product\n  and component. If a product is selected with no component, only flag types\n  which are available to at least one component of the product are shown.\n</p>\n\n<form id=\"flagtype_form\" name=\"flagtype_form\" action=\"editflagtypes.cgi\" method=\"get\">\n  <div class=\"inline\">\n    <label for=\"product\">Product:</label>";
#line 42 "template/en/default/admin/flag-type/list.html.tmpl"
$output .=  $context->include('global/product-select.html.tmpl', { 'id' => 'product', 'name' => 'product', 'add' => '__Any__', 'onchange' => 'selectProduct(this, this.form.component, \'__Any__\');', 'products' => $stash->get('products') });
$output .=  "\n  </div>\n\n  <div class=\"inline\">\n    <label for=\"component\">Component:</label>\n    <select name=\"component\">\n      <option value=\"\">__Any__</option>";
#line 59 "template/en/default/admin/flag-type/list.html.tmpl"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get('components');
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR1:   while (! $_tt_error) {
            $stash->{'comp'} = $_tt_value;
$output .=  "\n        <option value=\"";
#line 56 "template/en/default/admin/flag-type/list.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get('comp');
    
    &$_tt_filter($output);
};

$output .=  "\"\n          ";
#line 57 "template/en/default/admin/flag-type/list.html.tmpl"
if ($stash->get('selected_component') eq $stash->get('comp')) {
$output .=  'selected="selected"';
}

$output .=  ">";
#line 58 "template/en/default/admin/flag-type/list.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get('comp');
    
    &$_tt_filter($output);
};

$output .=  "</option>";;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

$output .=  "\n    </select>\n  </div>\n\n  <div class=\"inline\">\n    <input type=\"checkbox\" id=\"show_flag_counts\" name=\"show_flag_counts\" value=\"1\"\n      ";
#line 65 "template/en/default/admin/flag-type/list.html.tmpl"
if ($stash->get('show_flag_counts')) {
$output .=  'checked="checked"';
}

$output .=  ">\n    <label for=\"show_flag_counts\">Show flag counts</label>\n  </div>\n\n  <input type=\"submit\" id=\"submit\" value=\"Filter\">\n</form>\n\n<h3>Flag Types for ";
#line 72 "template/en/default/admin/flag-type/list.html.tmpl"
$output .=  $stash->get(['terms', 0, 'Bugs', 0]);
$output .=  "</h3>\n";
#line 74 "template/en/default/admin/flag-type/list.html.tmpl"
$output .=  $context->process('display_flag_types', { 'types' => $stash->get('bug_types'), 'types_id' => 'bugs' });
$output .=  "\n\n<p>\n  <a href=\"editflagtypes.cgi?action=enter&amp;target_type=bug\">Create Flag Type for ";
#line 77 "template/en/default/admin/flag-type/list.html.tmpl"
$output .=  $stash->get(['terms', 0, 'Bugs', 0]);
$output .=  "</a>\n</p>\n\n<h3>Flag Types for Attachments</h3>\n";
#line 82 "template/en/default/admin/flag-type/list.html.tmpl"
$output .=  $context->process('display_flag_types', { 'types' => $stash->get('attachment_types'), 'types_id' => 'attachments' });
$output .=  "\n\n<p>\n  <a href=\"editflagtypes.cgi?action=enter&amp;target_type=attachment\">Create Flag Type For Attachments</a>\n</p>\n";
#line 88 "template/en/default/admin/flag-type/list.html.tmpl"
$output .=  $context->process('global/footer.html.tmpl');
$output .=  "\n\n";

$output .=  "\n";
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
    DEFBLOCKS => {
        'display_flag_types' => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
$output .=  "\n  <table id=\"flag_types_";
#line 92 "template/en/default/admin/flag-type/list.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get('types_id');
    
    &$_tt_filter($output);
};

$output .=  "\">\n\n    <tr class=\"column_header\">\n      <th>Edit name ...</th>\n      <th>Description</th>\n      <th>Sortkey</th>\n      <th>Properties</th>\n      <th>Grant group</th>\n      <th>Request group</th>";
#line 105 "template/en/default/admin/flag-type/list.html.tmpl"
if ($stash->get('show_flag_counts')) {
$output .=  "\n        <th>Flags</th>\n        ";
#line 104 "template/en/default/admin/flag-type/list.html.tmpl"
$stash->set('state_desc', { 'granted' => 'granted', 'denied' => 'denied', 'pending' => 'pending'  });
}

$output .=  "\n      <th>Actions</th>\n    </tr>\n";
#line 151 "template/en/default/admin/flag-type/list.html.tmpl"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get('types');
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR1:   while (! $_tt_error) {
            $stash->{'type'} = $_tt_value;
$output .=  "\n\n      <tr class=\"";
#line 111 "template/en/default/admin/flag-type/list.html.tmpl"
if ($stash->get(['type', 0, 'is_active', 0])) {
$output .=  "active";
}
else {
$output .=  "inactive";
}

$output .=  "\">\n        <td class=\"nowrap\">\n          <a href=\"editflagtypes.cgi?action=edit&amp;id=";
#line 113 "template/en/default/admin/flag-type/list.html.tmpl"
$output .=  $stash->get(['type', 0, 'id', 0]);
$output .=  "\">";
#line 113 "template/en/default/admin/flag-type/list.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['type', 0, 'name', 0]);
    
    &$_tt_filter($output);
};

$output .=  "</a>\n        </td>\n        <td>";
#line 115 "template/en/default/admin/flag-type/list.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['type', 0, 'description', 0]);
    
    &$_tt_filter($output);
};

$output .=  "</td>\n        <td class=\"right\">";
#line 116 "template/en/default/admin/flag-type/list.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['type', 0, 'sortkey', 0]);
    
    &$_tt_filter($output);
};

$output .=  "</td>\n        <td>";
#line 120 "template/en/default/admin/flag-type/list.html.tmpl"
if ($stash->get(['type', 0, 'is_requestable', 0])) {
$output .=  "\n            <span class=\"requestable\">requestable</span>";
}

#line 123 "template/en/default/admin/flag-type/list.html.tmpl"
if ($stash->get(['type', 0, 'is_requestable', 0]) && $stash->get(['type', 0, 'is_requesteeble', 0])) {
$output .=  "\n            <span class=\"requesteeble\">(specifically)</span>";
}

#line 126 "template/en/default/admin/flag-type/list.html.tmpl"
if ($stash->get(['type', 0, 'is_multiplicable', 0])) {
$output .=  "\n            <span class=\"multiplicable\">multiplicable</span>";
}

$output .=  "\n        </td>\n        <td>";
#line 128 "template/en/default/admin/flag-type/list.html.tmpl"
if ($stash->get(['type', 0, 'grant_group', 0])) {
#line 128 "template/en/default/admin/flag-type/list.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['type', 0, 'grant_group', 0, 'name', 0]);
    
    &$_tt_filter($output);
};

}

$output .=  "</td>\n        <td>";
#line 129 "template/en/default/admin/flag-type/list.html.tmpl"
if ($stash->get(['type', 0, 'request_group', 0])) {
#line 129 "template/en/default/admin/flag-type/list.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['type', 0, 'request_group', 0, 'name', 0]);
    
    &$_tt_filter($output);
};

}

$output .=  "</td>";
#line 144 "template/en/default/admin/flag-type/list.html.tmpl"
if ($stash->get('show_flag_counts')) {
$output .=  "\n          <td>";
#line 142 "template/en/default/admin/flag-type/list.html.tmpl"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = [ 'granted', 'pending', 'denied' ];
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR2:   while (! $_tt_error) {
            $stash->{'state'} = $_tt_value;
#line 133 "template/en/default/admin/flag-type/list.html.tmpl"
$stash->set('bug_list', $stash->get(['bug_lists', 0, $stash->get(['type', 0, 'id', 0]), 0, $stash->get('state'), 0]) || [ ]);
#line 141 "template/en/default/admin/flag-type/list.html.tmpl"
if ($stash->get(['bug_list', 0, 'size', 0])) {
$output .=  "\n                <a href=\"buglist.cgi?bug_id=";
#line 135 "template/en/default/admin/flag-type/list.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['bug_list', 0, 'unique', 0, 'nsort', 0, 'join', [ ',' ]]);
    
    &$_tt_filter($output);
};

$output .=  "\">";
#line 136 "template/en/default/admin/flag-type/list.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['bug_list', 0, 'size', 0]);
    
    &$_tt_filter($output);
};

$output .=  " ";
#line 136 "template/en/default/admin/flag-type/list.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['state_desc', 0, $stash->get('state'), 0]);
    
    &$_tt_filter($output);
};

$output .=  "\n                </a>\n                <br>";
}
else {
$output .=  "\n                0 ";
#line 140 "template/en/default/admin/flag-type/list.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['state_desc', 0, $stash->get('state'), 0]);
    
    &$_tt_filter($output);
};

$output .=  "<br>";
}
;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

$output .=  "\n          </td>";
}

$output .=  "\n        <td>\n          <a href=\"editflagtypes.cgi?action=copy&amp;id=";
#line 146 "template/en/default/admin/flag-type/list.html.tmpl"
$output .=  $stash->get(['type', 0, 'id', 0]);
$output .=  "\">Copy</a>\n          | <a href=\"editflagtypes.cgi?action=confirmdelete&amp;id=";
#line 147 "template/en/default/admin/flag-type/list.html.tmpl"
$output .=  $stash->get(['type', 0, 'id', 0]);
$output .=  "\">Delete</a>\n        </td>\n      </tr>\n";;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

$output .=  "\n\n  </table>";
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
    },
});
