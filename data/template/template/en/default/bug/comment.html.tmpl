use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.26
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => 'bug/comment.html.tmpl',
        'modtime' => '1483774492',
    },
    BLOCK => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
$output .=  "\n\n";
$output .=  "\n";
#line 24 "template/en/default/bug/comment.html.tmpl"
if ($stash->get(['feature_enabled', [ 'jsonrpc' ]])) {
$output .=  "\n  <div id=\"comment_tabs\" role=\"tablist\">\n    <div id=\"comment_tab\" class=\"comment_tab active_comment_tab\"\n          role=\"tab\" aria-selected=\"true\"\n          onclick=\"show_comment_edit()\">Comment</div>\n    <div id=\"comment_preview_tab\" class=\"comment_tab\"\n          role=\"tab\" aria-selected=\"false\"\n          onclick=\"show_comment_preview(";
#line 22 "template/en/default/bug/comment.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('none')
              || $context->throw($context->error);

$output .=  $stash->get(['bug', 0, 'id', 0]);
    
    &$_tt_filter($output);
};

$output .=  ")\">Preview</div>\n  </div>";
}

$output .=  "\n";
#line 26 "template/en/default/bug/comment.html.tmpl"
$output .=  $context->include('global/textarea.html.tmpl', { 'name' => 'comment', 'id' => 'comment' });
$output .=  "\n";
#line 37 "template/en/default/bug/comment.html.tmpl"
if ($stash->get(['feature_enabled', [ 'jsonrpc' ]])) {
$output .=  "\n  <div id=\"comment_preview\" class=\"bz_default_hidden bz_comment\">\n    <div id=\"comment_preview_loading\" class=\"bz_default_hidden\">Generating Preview...</div>\n    <div id=\"comment_preview_error\" class=\"bz_default_hidden\"></div>\n    <pre id=\"comment_preview_text\" class=\"bz_comment_text\"></pre>\n  </div>";
}

$output .=  "\n";
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
    DEFBLOCKS => {

    },
});
