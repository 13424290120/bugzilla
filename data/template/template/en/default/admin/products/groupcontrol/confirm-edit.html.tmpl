use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.26
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1483774492',
        'name' => 'admin/products/groupcontrol/confirm-edit.html.tmpl',
    },
    BLOCK => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
$output .=  "\n";
#line 11 "template/en/default/admin/products/groupcontrol/confirm-edit.html.tmpl"

# CAPTURE
$stash->set('title', do {
    my $output = '';
$output .=  "\n  Confirm Group Control Change for product '";
#line 10 "template/en/default/admin/products/groupcontrol/confirm-edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['product', 0, 'name', 0]);
    
    &$_tt_filter($output);
};

$output .=  "'";
    $output;
});

$output .=  "\n";
#line 13 "template/en/default/admin/products/groupcontrol/confirm-edit.html.tmpl"
$output .=  $context->process('global/header.html.tmpl', { 'title' => $stash->get('title') });
$output .=  "\n";
#line 25 "template/en/default/admin/products/groupcontrol/confirm-edit.html.tmpl"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get('mandatory_groups');
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR1:   while (! $_tt_error) {
            $stash->{'group'} = $_tt_value;
$output .=  "\n  <p>\n    Group '";
#line 17 "template/en/default/admin/products/groupcontrol/confirm-edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['group', 0, 'name', 0]);
    
    &$_tt_filter($output);
};

$output .=  "' impacts ";
#line 22 "template/en/default/admin/products/groupcontrol/confirm-edit.html.tmpl"
if ($stash->get(['group', 0, 'count', 0]) eq 1) {
$output .=  "\n       one ";
#line 19 "template/en/default/admin/products/groupcontrol/confirm-edit.html.tmpl"
$output .=  $stash->get(['terms', 0, 'bug', 0]);
}
else {
#line 21 "template/en/default/admin/products/groupcontrol/confirm-edit.html.tmpl"
$output .=  $stash->get(['group', 0, 'count', 0]);
$output .=  " ";
#line 21 "template/en/default/admin/products/groupcontrol/confirm-edit.html.tmpl"
$output .=  $stash->get(['terms', 0, 'bugs', 0]);
}

$output .=  "\n    for which this group is mandatory and will be added.\n  </p>";;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

$output .=  "\n";
#line 37 "template/en/default/admin/products/groupcontrol/confirm-edit.html.tmpl"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get('na_groups');
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR1:   while (! $_tt_error) {
            $stash->{'group'} = $_tt_value;
$output .=  "\n  <p>\n    Group '";
#line 29 "template/en/default/admin/products/groupcontrol/confirm-edit.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get(['group', 0, 'name', 0]);
    
    &$_tt_filter($output);
};

$output .=  "' impacts ";
#line 34 "template/en/default/admin/products/groupcontrol/confirm-edit.html.tmpl"
if ($stash->get(['group', 0, 'count', 0]) eq 1) {
$output .=  "\n       one ";
#line 31 "template/en/default/admin/products/groupcontrol/confirm-edit.html.tmpl"
$output .=  $stash->get(['terms', 0, 'bug', 0]);
}
else {
#line 33 "template/en/default/admin/products/groupcontrol/confirm-edit.html.tmpl"
$output .=  $stash->get(['group', 0, 'count', 0]);
$output .=  " ";
#line 33 "template/en/default/admin/products/groupcontrol/confirm-edit.html.tmpl"
$output .=  $stash->get(['terms', 0, 'bugs', 0]);
}

$output .=  "  \n    for which this group is no longer applicable and will be removed.\n  </p>";;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

$output .=  "\n\n<form action=\"editproducts.cgi\" method=\"post\" >";
#line 40 "template/en/default/admin/products/groupcontrol/confirm-edit.html.tmpl"
$output .=  $context->process('global/hidden-fields.html.tmpl', { 'exclude' => ('' . "^Bugzilla_(login|password)") });
$output .=  "\n  <p>\n    <br>\n    Click \"Continue\" to proceed with the change including the changes\n    indicated above.  If you do not want these changes, use \"back\" to\n    return to the previous page.\n  </p>\n  <input type=\"hidden\" name=\"confirmed\" value=\"confirmed\">\n  <input type=\"submit\" id=\"update\" value=\"Continue\">\n</form>\n";
#line 51 "template/en/default/admin/products/groupcontrol/confirm-edit.html.tmpl"
$output .=  $context->process('global/footer.html.tmpl');
$output .=  "\n";
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
    DEFBLOCKS => {

    },
});
