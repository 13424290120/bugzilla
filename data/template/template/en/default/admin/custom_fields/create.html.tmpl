use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.26
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1483774492',
        'name' => 'admin/custom_fields/create.html.tmpl',
    },
    BLOCK => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
$output .=  "\n\n";
$output .=  "\n";
#line 15 "template/en/default/admin/custom_fields/create.html.tmpl"

# CAPTURE
$stash->set('javascript', do {
    my $output = '';
#line 14 "template/en/default/admin/custom_fields/create.html.tmpl"
$output .=  $context->include('admin/custom_fields/cf-js.js.tmpl');
    $output;
});

$output .=  "\n";
#line 17 "template/en/default/admin/custom_fields/create.html.tmpl"
$output .=  $context->process('global/header.html.tmpl', { 'title' => 'Add a new Custom Field', 'onload' => 'document.getElementById(\'new_bugmail\').disabled = true;', 'javascript_urls' => [ 'js/util.js' ], 'doc_section' => 'administering/custom-fields.html#adding-custom-fields', 'style_urls' => [ 'skins/standard/admin.css' ] });
$output .=  "\n\n";
$output .=  "\n<script type=\"text/javascript\">\n  YAHOO.util.Event.onDOMReady(function() {onChangeType(document.getElementById('type'))});\n</script>\n\n<p>\n  Adding custom fields can make the interface of Bugzilla very\n  complicated. Many admins who are new to Bugzilla start off\n  adding many custom fields, and then their users complain that the interface\n  is \"too complex\". Please think carefully before adding any custom fields.\n  It may be the case that Bugzilla already does what you need,\n  and you just haven't enabled the correct feature yet.\n</p>\n\n<ul>\n  <li>Custom field names must begin with \"cf_\" to distinguish them from\n      standard fields. If you omit \"cf_\" from the beginning of the name, it\n      will be added for you.</li>\n  <li>Descriptions are a very short string describing the field and will be\n      used as the label for this field in the user interface.</li>\n</ul>\n\n<form id=\"add_field\" action=\"editfields.cgi\" method=\"GET\">";
#line 48 "template/en/default/admin/custom_fields/create.html.tmpl"
$output .=  $context->process('admin/custom_fields/edit-common.html.tmpl');
$output .=  "\n\n  <input type=\"hidden\" name=\"action\" value=\"new\">\n  <input type=\"hidden\" name=\"token\" value=\"";
#line 51 "template/en/default/admin/custom_fields/create.html.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('html')
              || $context->throw($context->error);

$output .=  $stash->get('token');
    
    &$_tt_filter($output);
};

$output .=  "\">\n  <input type=\"submit\" id=\"create\" value=\"Create\">\n</form>\n\n<p>\n  <a href=\"editfields.cgi\">Back to the list of existing custom fields</a>\n</p>\n";
#line 59 "template/en/default/admin/custom_fields/create.html.tmpl"
$output .=  $context->process('global/footer.html.tmpl');
$output .=  "\n";
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
    DEFBLOCKS => {

    },
});
