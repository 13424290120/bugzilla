use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.26
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => 'request/queue.csv.tmpl',
        'modtime' => '1483774492',
    },
    BLOCK => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
$output .=  "\n";
#line 8 "template/en/default/request/queue.csv.tmpl"
$output .=  $context->process('global/field-descs.none.tmpl');
$output .=  "\n";
#line 10 "template/en/default/request/queue.csv.tmpl"
$stash->set('column_headers', { 'type' => 'Flag', 'status' => $stash->get(['field_descs', 0, 'bug_status', 0]), 'bug_summary' => $stash->get(['field_descs', 0, 'short_desc', 0]), 'bug_id' => $stash->get(['field_descs', 0, 'bug_id', 0]), 'attach_summary' => 'Attachment Description', 'attach_id' => 'Attachment ID', 'requester' => 'Requester', 'requestee' => 'Requestee', 'created' => 'Created', 'category' => $stash->get(['field_descs', 0, 'product', 0])  . ': '  . $stash->get(['field_descs', 0, 'component', 0])  });
$output .=  "\n";
#line 23 "template/en/default/request/queue.csv.tmpl"
$stash->set('display_columns', [ 'requester', 'requestee', 'type', 'status', 'bug_id', 'bug_summary', 'attach_id', 'attach_summary', 'created', 'category' ]);
$output .=  "\n";
#line 46 "template/en/default/request/queue.csv.tmpl"
if ($stash->get(['requests', 0, 'size', 0]) eq 0) {
$output .=  "\nNo requests.";
}
else {
#line 32 "template/en/default/request/queue.csv.tmpl"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get('display_columns');
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR1:   while (! $_tt_error) {
            $stash->{'column'} = $_tt_value;
#line 31 "template/en/default/request/queue.csv.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('csv')
              || $context->throw($context->error);

$output .=  $stash->get(['column_headers', 0, $stash->get('column'), 0]);
    
    &$_tt_filter($output);
};

#line 31 "template/en/default/request/queue.csv.tmpl"
if (! $stash->get(['loop', 0, 'last', 0])) {
$output .=  ',';
}
;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

$output .=  "\n";
#line 45 "template/en/default/request/queue.csv.tmpl"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get('requests');
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR1:   while (! $_tt_error) {
            $stash->{'request'} = $_tt_value;
#line 43 "template/en/default/request/queue.csv.tmpl"

# FOREACH 
do {
    my ($_tt_value, $_tt_error, $_tt_oldloop);
    my $_tt_list = $stash->get('display_columns');
    
    unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
        $_tt_list = Template::Config->iterator($_tt_list)
            || die $Template::Config::ERROR, "\n"; 
    }

    ($_tt_value, $_tt_error) = $_tt_list->get_first();
    eval { $_tt_oldloop = $stash->get('loop') };
    $stash->set('loop', $_tt_list);
    eval {
FOR2:   while (! $_tt_error) {
            $stash->{'column'} = $_tt_value;
#line 42 "template/en/default/request/queue.csv.tmpl"
if ($stash->get('column') eq 'created') {
#line 37 "template/en/default/request/queue.csv.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('csv')
              || $context->throw($context->error);


# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('time')
              || $context->throw($context->error);

$output .=  $stash->get(['request', 0, $stash->get('column'), 0]);
    
    &$_tt_filter($output);
};

    
    &$_tt_filter($output);
};

}
elsif ($stash->get(['column', 0, 'match', [ '^requeste' ]])) {
#line 39 "template/en/default/request/queue.csv.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('csv')
              || $context->throw($context->error);


# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('email')
              || $context->throw($context->error);

$output .=  $stash->get(['request', 0, $stash->get('column'), 0]);
    
    &$_tt_filter($output);
};

    
    &$_tt_filter($output);
};

}
else {
#line 41 "template/en/default/request/queue.csv.tmpl"

# FILTER
$output .=  do {
    my $output = '';
    my $_tt_filter = $context->filter('csv')
              || $context->throw($context->error);

$output .=  $stash->get(['request', 0, $stash->get('column'), 0]);
    
    &$_tt_filter($output);
};

}

#line 42 "template/en/default/request/queue.csv.tmpl"
if (! $stash->get(['loop', 0, 'last', 0])) {
$output .=  ',';
}
;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

$output .=  "\n";;
            ($_tt_value, $_tt_error) = $_tt_list->get_next();
        }
    };
    $stash->set('loop', $_tt_oldloop);
    die $@ if $@;
    $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
    die $_tt_error if $_tt_error;
};

}

$output .=  "\n";
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
    DEFBLOCKS => {

    },
});
